text = "ACGTACGTACGTACGTGGACCCAGTTCCACCAACTAAGCCACGTACGTCTAAGCCTTCCACCAACTAAGCCCTAAGCCTTCCACCAAACGTACGTACAAACCACTAAGCCCTAAGCCGGACCCAGTTCCACCAACTAAGCCGGACCCAGGGACCCAGACGTACGTGGACCCAGACGTACGTCTAAGCCACAAACCAACGTACGTGGACCCAGTTCCACCAACTAAGCCGGACCCAGCTAAGCCTTCCACCAAACAAACCAACAAACCAGGACCCAGTTCCACCAAGGACCCAGCTAAGCCACAAACCATTCCACCAACTAAGCCCTAAGCCACGTACGTCTAAGCCACAAACCAACGTACGTACAAACCAACAAACCAACAAACCACTAAGCCCTAAGCCTTCCACCAATTCCACCAAGGACCCAGTTCCACCAAGGACCCAGTTCCACCAATTCCACCAAACGTACGTTTCCACCAAACAAACCATTCCACCAAACAAACCATTCCACCAATTCCACCAAACGTACGTTTCCACCAAACAAACCAACAAACCAACAAACCAGGACCCAGCTAAGCCACGTACGTACAAACCAACGTACGTACGTACGTCTAAGCCCTAAGCCACAAACCAACAAACCACTAAGCCCTAAGCCCTAAGCCACGTACGTGGACCCAGTTCCACCAAACGTACGTACAAACCACTAAGCCACAAACCAACGTACGTCTAAGCCACGTACGTACAAACCATTCCACCAAACAAACCAGGACCCAGTTCCACCAAGGACCCAGGGACCCAGCTAAGCCACAAACCATTCCACCAAACGTACGTTTCCACCAACTAAGCCCTAAGCCCTAAGCCCTAAGCCACAAACCA"
pattern = 11
count = {}

# map out all of the patterns (that are the size of the pattern variable) and the number of times each pattern is used
for i in range(0, (len(text) - pattern + 1)):
    if text[i:i+pattern] in count:
        count[text[i:i+pattern]] = count[text[i:i+pattern]] + 1
    else:
        count[text[i:i+pattern]] = 1
print(count)

# put the top keys into the map based on the size of their value
top_values = []
for j in count:
    if not top_values:
        top_values.append(j)
    else:
        if count[j] == count[top_values[0]]:
            top_values.append(j)
        else:
            if count[j] > count[top_values[0]]:
                top_values.clear()
                top_values.append(j)

# print the list of the top patterns into a format that is readable by roslind
parse = " ".join(top_values)
print(parse)